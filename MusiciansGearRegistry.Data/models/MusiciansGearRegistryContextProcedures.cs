// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using MusiciansGearRegistry.Data.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace MusiciansGearRegistry.Data.Models
{
    public partial class MusiciansGearRegistryContext
    {
        private IMusiciansGearRegistryContextProcedures _procedures;

        public virtual IMusiciansGearRegistryContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MusiciansGearRegistryContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMusiciansGearRegistryContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class MusiciansGearRegistryContextProcedures : IMusiciansGearRegistryContextProcedures
    {
        private readonly MusiciansGearRegistryContext _context;

        public MusiciansGearRegistryContextProcedures(MusiciansGearRegistryContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_GearModelsByManufacturerAndTypeResult>> sp_GearModelsByManufacturerAndTypeAsync(int? manufacturerId, int? gearTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "manufacturerId",
                    Value = manufacturerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gearTypeId",
                    Value = gearTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<sp_GearModelsByManufacturerAndTypeResult>("EXEC @returnValue = [dbo].[sp_GearModelsByManufacturerAndType] @manufacturerId = @manufacturerId, @gearTypeId = @gearTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GearTypesByManufacturerResult>> sp_GearTypesByManufacturerAsync(int? manufacturerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "manufacturerId",
                    Value = manufacturerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<sp_GearTypesByManufacturerResult>("EXEC @returnValue = [dbo].[sp_GearTypesByManufacturer] @manufacturerId = @manufacturerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
